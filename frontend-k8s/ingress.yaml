apiVersion: v1
kind: Service
metadata:
  name: front-end
  namespace: staging-frontend
  labels:
    app.kubernetes.io/name: front-end
  annotations:
    beta.cloud.google.com/backend-config: '{"ports": {"80":"frontend-backend-config"}}'
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: front-end
    app.kubernetes.io/instance: front-end

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: front-end
  namespace: staging-frontend
  labels:
    app.kubernetes.io/name: front-end
    app.kubernetes.io/instance: front-end
spec:
  serviceName: front-end
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: front-end
      app.kubernetes.io/instance: front-end
  template:
    metadata:
      labels:
        app.kubernetes.io/name: front-end
        app.kubernetes.io/instance: front-end
      annotations:
        ss: ss
        # checksum/configmap: 7397d178601104d8c79b8cdd2e6691cdf46f1dff5e4ff65088db30a73c9c56ad
    spec:
      containers:
        - name: front-end
          image: "nickest11/frontend-nginx"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 80
          volumeMounts:
            - mountPath: /usr/src/app/dist
              name: frontend-dist
            - mountPath: /etc/nginx/conf.d
              name: nginx-conf
          resources:
            limits:
              cpu: 300m
              memory: 300Mi
            requests:
              cpu: 20m
              memory: 50Mi
            
      volumes:
        - name: nginx-conf
          configMap:
            name: frontend-nginx-conf
  volumeClaimTemplates:
    - metadata:
        name: frontend-dist
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 500Mi
---
# Source: front-end/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/name: front-end
    app.kubernetes.io/instance: front-end
  name: frontend-staging
  namespace: staging-frontend
  annotations:
    ingress.gcp.kubernetes.io/pre-shared-cert: frontend-codingcmk
    kubernetes.io/ingress.class: gce
    kubernetes.io/ingress.global-static-ip-name: frontend-ip
    
spec:
  rules:
    - http:
        paths:
          - path: /*
            backend:
              serviceName: front-end
              servicePort: 80

